wandb_version: 1

_wandb:
  desc: null
  value:
    python_version: 3.11.9
    cli_version: 0.17.0
    framework: torch
    is_jupyter_run: false
    is_kaggle_kernel: false
    start_time: 1716464037
    t:
      1:
      - 1
      - 55
      2:
      - 1
      - 55
      3:
      - 1
      - 2
      - 3
      - 4
      - 13
      - 22
      - 23
      - 34
      - 42
      4: 3.11.9
      5: 0.17.0
      8:
      - 4
      - 5
      13: darwin-arm64
algo:
  desc: null
  value: DQN
policy_class:
  desc: null
  value: <class 'stable_baselines3.dqn.policies.CnnPolicy'>
device:
  desc: null
  value: mps
verbose:
  desc: null
  value: 1
policy_kwargs:
  desc: null
  value: '{}'
num_timesteps:
  desc: null
  value: 0
_total_timesteps:
  desc: null
  value: 1000000
_num_timesteps_at_start:
  desc: null
  value: 0
seed:
  desc: null
  value: None
action_noise:
  desc: null
  value: None
start_time:
  desc: null
  value: 1716464037828645000
learning_rate:
  desc: null
  value: 0.0001
tensorboard_log:
  desc: null
  value: ./dqn_tensorboard/
_last_obs:
  desc: null
  value: "[[[[  0   0   0 ...  26  26  26]\n   [  0   0   0 ... 132 132 132]\n   [\
    \  0   0   0 ... 132 132 132]\n   ...\n   [  0   0   0 ...   0   0   0]\n   [\
    \  0   0   0 ...   0   0   0]\n   [  0   0   0 ...   0   0   0]]]]"
_last_episode_starts:
  desc: null
  value: '[ True]'
_last_original_obs:
  desc: null
  value: None
_episode_num:
  desc: null
  value: 0
use_sde:
  desc: null
  value: 'False'
sde_sample_freq:
  desc: null
  value: -1
_current_progress_remaining:
  desc: null
  value: 1.0
_stats_window_size:
  desc: null
  value: 100
ep_info_buffer:
  desc: null
  value: deque([], maxlen=100)
ep_success_buffer:
  desc: null
  value: deque([], maxlen=100)
_n_updates:
  desc: null
  value: 0
_custom_logger:
  desc: null
  value: 'False'
env:
  desc: null
  value: <stable_baselines3.common.vec_env.vec_transpose.VecTransposeImage object
    at 0x35bedb7d0>
_vec_normalize_env:
  desc: null
  value: None
observation_space:
  desc: null
  value: Box(0, 255, (1, 84, 84), uint8)
action_space:
  desc: null
  value: Discrete(18)
n_envs:
  desc: null
  value: 1
buffer_size:
  desc: null
  value: 1000000
batch_size:
  desc: null
  value: 32
learning_starts:
  desc: null
  value: 100
tau:
  desc: null
  value: 1.0
gamma:
  desc: null
  value: 0.99
gradient_steps:
  desc: null
  value: 1
optimize_memory_usage:
  desc: null
  value: 'False'
replay_buffer:
  desc: null
  value: <stable_baselines3.common.buffers.ReplayBuffer object at 0x35be05890>
replay_buffer_class:
  desc: null
  value: <class 'stable_baselines3.common.buffers.ReplayBuffer'>
replay_buffer_kwargs:
  desc: null
  value: '{}'
_episode_storage:
  desc: null
  value: None
train_freq:
  desc: null
  value: 'TrainFreq(frequency=4, unit=<TrainFrequencyUnit.STEP: ''step''>)'
use_sde_at_warmup:
  desc: null
  value: 'False'
exploration_initial_eps:
  desc: null
  value: 1.0
exploration_final_eps:
  desc: null
  value: 0.05
exploration_fraction:
  desc: null
  value: 0.1
target_update_interval:
  desc: null
  value: 10000
_n_calls:
  desc: null
  value: 0
max_grad_norm:
  desc: null
  value: 10
exploration_rate:
  desc: null
  value: 0.0
lr_schedule:
  desc: null
  value: <function get_schedule_fn.<locals>.<lambda> at 0x309b374c0>
policy:
  desc: null
  value: "CnnPolicy(\n  (q_net): QNetwork(\n    (features_extractor): NatureCNN(\n\
    \      (cnn): Sequential(\n        (0): Conv2d(1, 32, kernel_size=(8, 8), stride=(4,\
    \ 4))\n        (1): ReLU()\n        (2): Conv2d(32, 64, kernel_size=(4, 4), stride=(2,\
    \ 2))\n        (3): ReLU()\n        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1,\
    \ 1))\n        (5): ReLU()\n        (6): Flatten(start_dim=1, end_dim=-1)\n  \
    \    )\n      (linear): Sequential(\n        (0): Linear(in_features=3136, out_features=512,\
    \ bias=True)\n        (1): ReLU()\n      )\n    )\n    (q_net): Sequential(\n\
    \      (0): Linear(in_features=512, out_features=18, bias=True)\n    )\n  )\n\
    \  (q_net_target): QNetwork(\n    (features_extractor): NatureCNN(\n      (cnn):\
    \ Sequential(\n        (0): Conv2d(1, 32, kernel_size=(8, 8), stride=(4, 4))\n\
    \        (1): ReLU()\n        (2): Conv2d(32, 64, kernel_size=(4, 4), stride=(2,\
    \ 2))\n        (3): ReLU()\n        (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1,\
    \ 1))\n        (5): ReLU()\n        (6): Flatten(start_dim=1, end_dim=-1)\n  \
    \    )\n      (linear): Sequential(\n        (0): Linear(in_features=3136, out_features=512,\
    \ bias=True)\n        (1): ReLU()\n      )\n    )\n    (q_net): Sequential(\n\
    \      (0): Linear(in_features=512, out_features=18, bias=True)\n    )\n  )\n)"
q_net:
  desc: null
  value: "QNetwork(\n  (features_extractor): NatureCNN(\n    (cnn): Sequential(\n\
    \      (0): Conv2d(1, 32, kernel_size=(8, 8), stride=(4, 4))\n      (1): ReLU()\n\
    \      (2): Conv2d(32, 64, kernel_size=(4, 4), stride=(2, 2))\n      (3): ReLU()\n\
    \      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (5): ReLU()\n\
    \      (6): Flatten(start_dim=1, end_dim=-1)\n    )\n    (linear): Sequential(\n\
    \      (0): Linear(in_features=3136, out_features=512, bias=True)\n      (1):\
    \ ReLU()\n    )\n  )\n  (q_net): Sequential(\n    (0): Linear(in_features=512,\
    \ out_features=18, bias=True)\n  )\n)"
q_net_target:
  desc: null
  value: "QNetwork(\n  (features_extractor): NatureCNN(\n    (cnn): Sequential(\n\
    \      (0): Conv2d(1, 32, kernel_size=(8, 8), stride=(4, 4))\n      (1): ReLU()\n\
    \      (2): Conv2d(32, 64, kernel_size=(4, 4), stride=(2, 2))\n      (3): ReLU()\n\
    \      (4): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1))\n      (5): ReLU()\n\
    \      (6): Flatten(start_dim=1, end_dim=-1)\n    )\n    (linear): Sequential(\n\
    \      (0): Linear(in_features=3136, out_features=512, bias=True)\n      (1):\
    \ ReLU()\n    )\n  )\n  (q_net): Sequential(\n    (0): Linear(in_features=512,\
    \ out_features=18, bias=True)\n  )\n)"
batch_norm_stats:
  desc: null
  value: '[]'
batch_norm_stats_target:
  desc: null
  value: '[]'
exploration_schedule:
  desc: null
  value: <function get_linear_fn.<locals>.func at 0x309b36ca0>
_logger:
  desc: null
  value: <stable_baselines3.common.logger.Logger object at 0x309fa0c10>
